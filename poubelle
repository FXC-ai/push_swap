    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_b(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_b(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_b(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_b(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_a(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_a(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_a(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    ft_push_a(ptr_first_node_a, ptr_first_node_b);
    printf("ACTION\n");

    printf("liste A : \n");
    ft_display_lst(ptr_first_node_a);
    printf("\n");
    printf("liste B : \n");
    ft_display_lst(ptr_first_node_b);
    printf("\n");

    /*
void    ft_swap_in(t_node *node_min, t_node *node_max)
{
    t_node  *temp;
    t_node  *before_min = node_min->previous;
    t_node  *after_max = node_max->next;

    before_min->next = node_max;
    after_max->previous = node_min;

    temp = ft_new_node(node_min->value);
    temp->previous = node_min->previous;
    temp->next = node_min->next;

    node_min->previous = node_max;
    node_min->next = node_max->next;

    node_max->previous = temp->previous;
    node_max->next = node_min;
}

void    ft_swap_begin(t_node **stack, t_node *node_min, t_node *node_max)
{
    printf("\n");
    ft_display_node(node_min);
    ft_display_node(node_max);
    printf("\n");

    t_node  *after_max;

    after_max = node_max->next;
    after_max->previous = node_min;

    node_max->previous = NULL;
    node_max->next = node_min;

    node_min->previous = node_max;
    node_min->next = after_max;
    
    *stack = node_max;
    printf("\n");
    ft_display_node(node_max);
    ft_display_node(node_min);
    printf("\n");

}
*/

    t_node  *stack1 = ft_create_lst(tab_int, tablen);
    free(tab_int);

    printf("\n\n----------------DISPLAY BEGIN----------------\n\n");


    if (ft_sort_check(&stack1) == 1)
    {
        ft_destruct_lst(&stack1);
        return (0);
    }

    ft_display_lst(&stack1);
    printf("\n");

    t_node *node_min = stack1;
    t_node *node_max = stack1->next;
    

    ft_swap_begin(&stack1, node_min, node_max);
    
    ft_display_lst(&stack1);
    
    ft_destruct_lst(&stack1);

    printf("\n\n----------------DISPLAY   END----------------\n\n");